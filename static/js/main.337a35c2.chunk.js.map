{"version":3,"sources":["components/Users.jsx","containers/UsersContainer/UsersContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Users","_ref","users","handleChange","react_default","a","createElement","className","onChange","type","placeholder","length","map","user","i","firstName","lastName","jobTitle","phoneNumber","src","avatarUrl","UsersContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allUsers","filteredUsers","username","bind","assertThisInitialized","sort","b","primaryName","secondaryName","e","_this2","target","value","setState","axios","get","concat","then","res","data","classes","Component","App","UsersContainer_UsersContainer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.337a35c2.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nexport default ({ users, handleChange }) => {\n\treturn (\n\t\t// <div className= { classes.container }>\n\t\t\t<div className= 'container'>\n\t\t\t{/* <div className= { classes.navbar }> */}\n\t\t\t\t<div className= 'navbar'>\n\t\t\t\t<i className=\"fa fa-search\"></i>\n\t\t\t\t<input onChange= { handleChange } type='text' placeholder='\tSearch by name...'></input>\n\t\t\t</div>\n\t\t\t{\n\t\t\t\t(users && users.length > 0) && users.map((user,i) => (\n\t\t\t\t\t// <div className= { classes.listItems } key= { i }>\n\t\t\t\t\t\t<div className= 'listItems'>\n\t\t\t\t\t\t{/* <div className= { classes.name }> */}\n\t\t\t\t\t\t<div className= 'name'>\n\t\t\t\t\t\t\t<p>{ user.firstName + ' ' + user.lastName }</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/* <div className= { classes.occupation }> */}\n\t\t\t\t\t\t<div className= 'occupation'>\n\t\t\t\t\t\t\t<p>{ '(' + user.jobTitle + ')' }</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/* <div className= { classes.phone }> */}\n\t\t\t\t\t\t<div className= 'phone'>\n\t\t\t\t\t\t\t<p>{ user.phoneNumber }</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/* <div className={ classes.img }> */}\n\t\t\t\t\t\t<div className= 'img'>\n\t\t\t\t\t\t\t<img src= { user.avatarUrl } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}\t\t\t\t\n\t\t</div>\n\t)\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport classes from '../../App.css';\nimport Users from '../../components/Users';\n\nexport default class UsersContainer extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tallUsers : [],\n\t\t\tfilteredUsers : [],\n\t\t\tusername : '',\n\t\t}\n\t\t// Bindeo el this a handleChange para que se ejecute correctamente cuando es llamado por el input del navbar.\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\t// componentDidMount(){\n\t// \t// Una vez montado el componente, hago un pedido por todos los users;\n\t// \taxios.get('localhost:3000/people')\n\t// \t\t.then(res => res.data)\n\t// \t\t.then(allUsers => {\n\t// \t\t\tthis.sortingByName(allUsers);\n\t// \t\t\tthis.setState({ allUsers });\n\t// \t\t});\n\t// }\n\n\t// Ordeno el array de users por orden alfabetico en los nombres.\n\tsortingByName(users){\n\t\treturn users.sort((a, b) => {\n\t\t\tlet primaryName = a.firstName;\n\t\t\tlet secondaryName = b.firstName;\n\t\t\tif(primaryName < secondaryName){  \n\t\t\t\treturn -1;\n\t\t\t}else if(primaryName > secondaryName){\n\t\t\t\treturn 1;\n\t\t\t}else{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t})\n\t}\n\n\t// Manejo el valor del input del navbar. \n\thandleChange(e){\n\t\tlet username = e.target.value;\n\t\tthis.setState({ username });\n\t\t\n\t\t// Si el input tiene 3 o mas letras, hago un pedido a la API por usuarios que matcheen en su nombre o apellido con este input.\n\t\tif(username.length >= 3){ \n\t\taxios.get(`/people/by-name/${username}`)\n\t\t\t.then(res => res.data)\n\t\t\t.then(filteredUsers => this.setState({ filteredUsers }));\n\t\t\n\t\t// Sino, muestro todos los usuarios.\n\t\t}else{\n\t\t\tthis.setState({ filteredUsers : [] });\n\t\t}\n\t}\n\trender(){\n\t\tlet users= [\n\t\t\t{\n\t\t\t\tfirstName : 'pepe',\n\t\t\t\tlastName : 'mongo',\n\t\t\t\tjobTitle : 'ingeniero',\n\t\t\t\tphoneNumber : '111231232',\n\t\t\t\tavatarUrl : 'https://cdn.iconscout.com/icon/free/png-256/avatar-369-456321.png'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfirstName : 'pepe',\n\t\t\t\tlastName : 'mongo',\n\t\t\t\tjobTitle : 'ingeniero',\n\t\t\t\tphoneNumber : '111231232',\n\t\t\t\tavatarUrl : 'https://cdn.iconscout.com/icon/free/png-256/avatar-369-456321.png'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfirstName : 'pepe',\n\t\t\t\tlastName : 'mongo',\n\t\t\t\tjobTitle : 'ingeniero',\n\t\t\t\tphoneNumber : '111231232',\n\t\t\t\tavatarUrl : 'https://cdn.iconscout.com/icon/free/png-256/avatar-369-456321.png'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfirstName : 'pepe',\n\t\t\t\tlastName : 'mongo',\n\t\t\t\tjobTitle : 'ingeniero',\n\t\t\t\tphoneNumber : '111231232',\n\t\t\t\tavatarUrl : 'https://cdn.iconscout.com/icon/free/png-256/avatar-369-456321.png'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfirstName : 'pepe',\n\t\t\t\tlastName : 'mongo',\n\t\t\t\tjobTitle : 'ingeniero',\n\t\t\t\tphoneNumber : '111231232',\n\t\t\t\tavatarUrl : 'https://cdn.iconscout.com/icon/free/png-256/avatar-369-456321.png'\n\t\t\t},\n\t\t]\n\t\treturn(\n\t\t\t<Users \n\t\t\t\thandleChange = { this.handleChange }\n\t\t\t\tusers = { users } \n\t\t\t\t// users = { (this.state.filteredUsers.length > 0 && this.state.filteredUsers) || (this.state.allUsers) }\n\t\t\t\tclasses = { classes }\n\t\t\t/>\n\t\t)\n\t}\n}\n","// IMPORT LIBRARIES\nimport React, { Component } from 'react';\n\n//IMPORT CONTAINERS\nimport UsersContainer from './containers/UsersContainer/UsersContainer';\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);        \n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<UsersContainer />\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}